// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"encoder/helper"
	"encoder/layouts"
	"encoder/t"
	"fmt"
	"runtime"
	"time"
)

func Setting(Ctx t.TemplCtx, Title string, v t.SettingValidator) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<article class=\"message\"><div class=\"message-header\"><p>Settings</p></div><div class=\"message-body\"><form method=\"POST\" action=\"/setting\"><!-- Security Section --><article class=\"message\"><div class=\"message-header\"><p>Security</p></div><div class=\"message-body\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if helper.PStrToStr(v.EnableAuthentication) != "checked" && helper.PStrToStr(v.EnableAuthentication) != "on" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"message is-warning\"><div class=\"message-header\"><p>Warning</p></div><div class=\"message-body\">Authentication is currently disabled. The application is accessible to anyone on your network. It is highly recommended to enable authentication.</div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"field\"><label class=\"checkbox\"><input type=\"checkbox\" name=\"EnableAuthentication\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if helper.PStrToStr(v.EnableAuthentication) == "checked" || helper.PStrToStr(v.EnableAuthentication) == "on" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " checked")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "> <strong>Enable Authentication</strong></label><p class=\"help\">When enabled, users will be required to log in to access the application. You must create a user before enabling this.</p></div><div class=\"field\"><label class=\"label\">Authentication Method</label><div class=\"control\"><label class=\"radio\"><input type=\"radio\" name=\"AuthenticationType\" value=\"form\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if helper.PStrToStr(v.AuthenticationType) == "form" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, " checked")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "> Form-Based</label> <label class=\"radio\"><input type=\"radio\" name=\"AuthenticationType\" value=\"basic\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if helper.PStrToStr(v.AuthenticationType) == "basic" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, " checked")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "> HTTP Basic Auth</label></div><p class=\"help\">Choose how users authenticate. Form-based provides a login page, while Basic Auth uses the browser's built-in prompt.</p></div><div class=\"field\"><a href=\"/setting/user\" class=\"button is-info\"><span>User Settings</span></a><p class=\"help\">Manage users and passwords.</p></div></div></article><!-- Folder Scanning Section --><article class=\"message\"><div class=\"message-header\"><p>Folder Scanning</p></div><div class=\"message-body\"><div class=\"field\"><label class=\"checkbox\"><input type=\"checkbox\" name=\"EnableAutomaticScanns\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if helper.PStrToStr(v.EnableAutomaticScanns) == "checked" || helper.PStrToStr(v.EnableAutomaticScanns) == "on" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, " checked")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "> <strong>Enable Automatic Scanning</strong></label><p class=\"help\">If checked, the application will automatically scan your media folders for new files periodically.</p></div><div class=\"field\"><label class=\"label\">Scanning Interval</label><div class=\"control\"><div class=\"select\"><select name=\"AutomaticScannsInterval\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, min := range []int{2, 5, 15, 30, 60, 120, 720, 1440} {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "<option value=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.EscapeString(fmt.Sprint(min)))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/setting.templ`, Line: 103, Col: 63}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				if v.AutomaticScannsInterval == min {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, " selected")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, ">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var4 string
				templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(templ.EscapeString(fmt.Sprintf("%s", time.Duration(min)*time.Minute)))
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/setting.templ`, Line: 104, Col: 87}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "</option>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "</select></div></div><p class=\"help\">How often the application should scan for new files when automatic scanning is enabled.</p></div><div class=\"field\"><label class=\"checkbox\"><input type=\"checkbox\" name=\"AutomaticScannsAtStartup\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if helper.PStrToStr(v.AutomaticScannsAtStartup) == "checked" || helper.PStrToStr(v.AutomaticScannsAtStartup) == "on" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, " checked")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "> <strong>Scan on Startup</strong></label><p class=\"help\">Performs a full scan of all media folders as soon as the application starts.</p></div><div class=\"field\"><a href=\"/setting/folder\" class=\"button is-info\"><span>Folder Settings</span></a><p class=\"help\">Add or remove folders to be scanned for media.</p></div></div></article><!-- File Encoding Section --><article class=\"message\"><div class=\"message-header\"><p>File Encoding</p></div><div class=\"message-body\"><div class=\"field\"><label class=\"checkbox\"><input type=\"checkbox\" name=\"EnableEncoding\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if helper.PStrToStr(v.EnableEncoding) == "checked" || helper.PStrToStr(v.EnableEncoding) == "on" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, " checked")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "> <strong>Enable Encoding</strong></label><p class=\"help\">Master switch for the entire encoding engine. If disabled, no files will be processed.</p></div><hr><h3 class=\"subtitle is-5\">Codec &amp; Quality</h3><div class=\"field\"><label class=\"checkbox\"><input type=\"checkbox\" name=\"EnableHevcEncoding\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if helper.PStrToStr(v.EnableHevcEncoding) == "checked" || helper.PStrToStr(v.EnableHevcEncoding) == "on" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, " checked")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "> <strong>Use HEVC (H.265) Codec</strong></label><p class=\"help\">Encode videos using the HEVC (H.265) codec for better compression. If unchecked, the older H.264 codec will be used.</p></div><div class=\"field\"><label class=\"label\">Constant Rate Factor (CRF)</label><div class=\"control\"><input class=\"input\" type=\"number\" name=\"EncodingCrf\" style=\"max-width: 400px;\" value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(templ.EscapeString(fmt.Sprint(v.EncodingCrf)))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/setting.templ`, Line: 170, Col: 63}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "\" min=\"1\" max=\"50\"></div><p class=\"help\">Controls the output quality. Lower values mean higher quality and larger file sizes. A sane range is 18-28. Default is 25.</p></div><div class=\"field\"><label class=\"label\">Output Resolution (Width)</label><div class=\"control\"><input class=\"input\" type=\"number\" name=\"EncodingResolution\" style=\"max-width: 400px;\" value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var6 string
			templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(templ.EscapeString(fmt.Sprint(v.EncodingResolution)))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/setting.templ`, Line: 185, Col: 70}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 25, "\" min=\"100\" max=\"5000\" step=\"2\"></div><p class=\"help\">The width of the output video in pixels (e.g., 1920 for 1080p). The height will be adjusted automatically to maintain the aspect ratio. Must be an even number.</p></div><hr><h3 class=\"subtitle is-5\">Hardware &amp; Performance</h3><div class=\"field\"><label class=\"label\">Encoding Threads</label><div class=\"control\"><input class=\"input\" type=\"number\" name=\"EncodingThreads\" style=\"max-width: 400px;\" value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(templ.EscapeString(fmt.Sprint(v.EncodingThreads)))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/setting.templ`, Line: 203, Col: 67}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 26, "\" min=\"0\" max=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var8 string
			templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprint(runtime.NumCPU()))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/setting.templ`, Line: 205, Col: 44}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 27, "\"></div><p class=\"help\">Number of CPU threads to use for encoding. Set to 0 to use all available threads (Max: ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var9 string
			templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprint(runtime.NumCPU()))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/setting.templ`, Line: 208, Col: 141}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 28, "). This setting is ignored when GPU encoding is active.</p></div><div class=\"field\"><label class=\"checkbox\"><input type=\"checkbox\" name=\"EnableNvidiaGpuEncoding\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if helper.PStrToStr(v.EnableNvidiaGpuEncoding) == "checked" || helper.PStrToStr(v.EnableNvidiaGpuEncoding) == "on" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 29, " checked")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 30, "> <strong>Enable NVIDIA (NVENC) GPU Encoding</strong></label><p class=\"help\">Use an NVIDIA GPU for hardware-accelerated encoding. This is much faster than CPU encoding but requires a compatible NVIDIA graphics card and drivers. GPU encoding is known for having artifacts and might result in lower quality.</p></div><div class=\"field\"><label class=\"checkbox\"><input type=\"checkbox\" name=\"EnableAmdGpuEncoding\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if helper.PStrToStr(v.EnableAmdGpuEncoding) == "checked" || helper.PStrToStr(v.EnableAmdGpuEncoding) == "on" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 31, " checked")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 32, "> <strong>Enable AMD (VAAPI) GPU Encoding</strong></label><p class=\"help\">Use an AMD GPU for hardware-accelerated encoding. This is much faster than CPU encoding but requires a compatible AMD graphics card and drivers on Linux. GPU encoding is known for having artifacts and might result in lower quality.</p></div><hr><h3 class=\"subtitle is-5\">Workflow &amp; Debugging</h3><div class=\"field\"><label class=\"label\">Maximum Retries</label><div class=\"control\"><input class=\"input\" type=\"number\" name=\"EncodingMaxRetry\" style=\"max-width: 400px;\" value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var10 string
			templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(templ.EscapeString(fmt.Sprint(v.EncodingMaxRetry)))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/setting.templ`, Line: 242, Col: 68}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 33, "\" min=\"0\" max=\"999\"></div><p class=\"help\">How many times the application should retry a failed encoding job before marking it as permanently failed.</p></div><div class=\"field\"><label class=\"label\">Pre-Copy File Count</label><div class=\"control\"><input class=\"input\" type=\"number\" name=\"PreCopyFileCount\" style=\"max-width: 400px;\" value=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var11 string
			templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(templ.EscapeString(fmt.Sprint(v.PreCopyFileCount)))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `views/setting.templ`, Line: 257, Col: 68}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 34, "\" min=\"0\" max=\"10\"></div><p class=\"help\">To speed up processing, the application can copy the next files in the queue to a temporary local directory while the current file is encoding. Set to 0 to disable.</p></div><div class=\"field\"><label class=\"checkbox\"><input type=\"checkbox\" name=\"EnableImageComparison\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if helper.PStrToStr(v.EnableImageComparison) == "checked" || helper.PStrToStr(v.EnableImageComparison) == "on" {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 35, " checked")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 36, "> <strong>Enable Image Comparison</strong></label><p class=\"help\">After each successful encode, generate a side-by-side comparison image showing the original video and the encoded version. Useful for quality checks.</p></div></div></article><!-- Save Button --><div class=\"field\"><div class=\"control\"><button type=\"submit\" class=\"button is-primary is-large\"><span>Save All Settings</span></button></div></div></form></div></article>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = layouts.Default(Ctx, Title).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
