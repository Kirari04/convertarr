package views

import (
	"encoder/app"
	"encoder/layouts"
	"encoder/t"
	"fmt"
	"time"
)

templ Index(Ctx t.TemplCtx, Title string, longStats bool, savedStorage string, encodedFiles string, intervalSeconds int) {
	@layouts.Default(Ctx, Title) {
		<article class="message">
			<div class="message-header">
				<p>Dashboard</p>
				if longStats {
					<a href="/" class="button is-primary">
						Show Live Stats
					</a>
				} else {
					<a href="/?long=yes" class="button is-primary">
						Show Long-Term Stats
					</a>
				}
			</div>
			<div class="message-body">
				<div class="columns is-multiline has-text-centered">
					<div class="column is-flex">
						<article class="box" style="width: 100%;">
							<p class="title">{ fmt.Sprint(len(app.FilesToEncode)) }</p>
							<p class="subtitle">Files in Queue</p>
						</article>
					</div>
					<div class="column is-flex">
						<article class="box" style="width: 100%;">
							<p class="title">{ fmt.Sprint(len(app.PreloadedFiles.Get())) }</p>
							<p class="subtitle">Pre-Copied Files</p>
							<p class="help">Files copied locally, ready for encoding.</p>
						</article>
					</div>
					<div class="column is-flex">
						<article class="box" style="width: 100%;">
							<p class="title">{ fmt.Sprintf("%d", app.LastScanNFiles) }</p>
							<p class="subtitle">Files Scanned</p>
							<p class="help">
								if app.LastFileScan != nil {
									Last scan { fmt.Sprintf("%.0fs", time.Since(*app.LastFileScan).Seconds()) }s ago.
								} else {
									Never scanned.
								}
								if app.IsFileScanning {
									<span class="tag is-info is-light">Scanning...</span>
								}
							</p>
						</article>
					</div>
					<div class="column is-flex">
						<article class="box" style="width: 100%;">
							<p class="title">{ savedStorage }</p>
							<p class="subtitle">Storage Saved</p>
						</article>
					</div>
					<div class="column is-flex">
						<article class="box" style="width: 100%;">
							<p class="title">{ encodedFiles }</p>
							<p class="subtitle">Files Encoded</p>
						</article>
					</div>
				</div>

				<div class="box">
					<h3 class="title is-4">Server Resource Usage</h3>
					if longStats {
						<p class="subtitle is-6">
							Showing long-term stats (average CPU/Mem/Net usage over the last { fmt.Sprintf("%s", app.ResourcesInterval*time.Duration(app.MaxResourcesHistory)) })
						</p>
					} else {
						<p class="subtitle is-6">
							Showing live stats (more accurate CPU/Mem/Net usage over the last { fmt.Sprintf("%s", app.ResourcesInterval*time.Duration(48)) })
						</p>
					}
					<div id="resource-chart"></div>
				</div>
				<div class="box">
					<h3 class="title is-4">Conversion Stats (Last 30 Days)</h3>
					<div id="conversion-chart"></div>
				</div>
			</div>
		</article>
		@chartData(longStats, intervalSeconds)
		@conversionChartScript()
	}
}

script chartData(longStats bool, intervalSeconds int) {
    // --- Helper Functions ---
    function humanFileSize(bytes, si = false, dp = 1) {
        const thresh = si ? 1000 : 1024;
        if (Math.abs(bytes) < thresh) {
            return bytes + ' B';
        }
        const units = si
            ? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
            : ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
        let u = -1;
        const r = 10 ** dp;
        do {
            bytes /= thresh;
            ++u;
        } while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);
        return bytes.toFixed(dp) + ' ' + units[u];
    }

    /**
     * Generates an array of historical timestamps for the chart's X-axis.
     * @param {number} dataLength - The number of data points.
     * @param {number} interval - The interval between data points in seconds.
     * @returns {number[]} - An array of timestamps in milliseconds.
     */
    const generateTimestamps = (dataLength, interval) => {
        const timestamps = [];
        const now = new Date().getTime();
        for (let i = 0; i < dataLength; i++) {
            // Work backwards from the current time to generate the timeline
            const timestamp = now - ((dataLength - 1 - i) * interval * 1000);
            timestamps.push(timestamp);
        }
        return timestamps;
    };

    // --- Chart State ---
    window['chart'] = null;
    const dataUrl = `/stats/data${longStats ? '?long=yes' : ''}`;

    // --- Chart Logic ---
    const updateAndRenderChart = async () => {
        try {
            const response = await fetch(dataUrl);
            if (!response.ok) {
                console.error("Failed to fetch stats data:", response.statusText);
                return;
            }
            const resources = await response.json();
            const dataLength = (resources.Cpu || []).length;
            const timestamps = generateTimestamps(dataLength, intervalSeconds);

            // Pair each data point with its corresponding timestamp, which is required for a datetime axis.
            const seriesData = [
                { name: 'Memory Usage', type: 'area', data: (resources.Mem || []).map((y, i) => [timestamps[i], y]) },
                { name: 'CPU Usage', type: 'area', data: (resources.Cpu || []).map((y, i) => [timestamps[i], y]) },
                { name: 'Network Out', type: 'line', data: (resources.NetOut || []).map((y, i) => [timestamps[i], y]) },
                { name: 'Network In', type: 'line', data: (resources.NetIn || []).map((y, i) => [timestamps[i], y]) }
            ];

            if (!window['chart']) {
                // Initial Render: Create the window['chart'] instance if it doesn't exist.
                const options = {
                    series: seriesData,
                    chart: {
                        height: 350,
                        type: 'line',
                        stacked: false, // Allows series to overlap, which is necessary for different scales.
                        zoom: { enabled: !!longStats, type: 'x', autoScaleYaxis: true },
                    },
                    theme: {
                        mode: 'dark',
                        palette: 'palette1'
                    },
                    dataLabels: { enabled: false },
                    stroke: { width: [2, 2, 2, 2], curve: 'smooth' },
                    xaxis: {
                        type: 'datetime', // The X-axis now represents time.
                        labels: { datetimeUTC: false } // Display timestamps in the user's local timezone.
                    },
                    // Configure dual Y-axes: one for percentages (CPU/Mem) and one for data rates (Network).
                    yaxis: [
                        { // Primary Y-axis for CPU and Memory (%)
                            seriesName: 'CPU Usage',
                            axisTicks: { show: true },
                            axisBorder: { show: true },
                            title: { text: "CPU / Memory (%)" },
                            min: 0,
                            max: 100,
                            labels: { formatter: (val) => `${Math.round(val)} %` }
                        },
                        { seriesName: 'Memory Usage', show: false, min: 0, max: 100 }, // Associates Memory with the first axis
                        { // Secondary Y-axis for Network data (bytes/s), positioned on the right.
                            seriesName: 'Network Out',
                            opposite: true,
                            axisTicks: { show: true },
                            axisBorder: { show: true },
                            title: { text: "Network Usage" },
                            labels: { formatter: (val) => `${humanFileSize(val, true, 1)}/s` }
                        },
                        { seriesName: 'Network In', show: false, opposite: true } // Associates Network In with the second axis
                    ],
                    tooltip: {
                        shared: true, // Show a single tooltip for all series at a given time point.
                        intersect: false,
                        x: { format: 'dd MMM yyyy - HH:mm:ss' },
                        // Custom formatter to show the correct unit for each series.
                        y: {
                            formatter: (value, { seriesIndex }) => {
                                if (seriesIndex < 2) { // CPU or Memory
                                    return `${Math.round(value)} %`;
                                } else { // Network
                                    return `${humanFileSize(value, true, 2)}/s`;
                                }
                            }
                        }
                    },
                    legend: {
                        position: 'top',
                        horizontalAlign: 'center',
                    }
                };
                window['chart'] = new ApexCharts(document.querySelector("#resource-chart"), options);
                window['chart'].render();
            } else {
                // Update existing window['chart'] with new data.
                window['chart'].updateSeries(seriesData);
            }

        } catch (error) {
            console.error("Error updating charts:", error);
        }
    };

    // Initial render, then set an interval for periodic updates.
    updateAndRenderChart();
    if (!longStats) {
        setInterval(updateAndRenderChart, intervalSeconds * 1000);
    }
}

script conversionChartScript() {
    const renderConversionChart = async () => {
        try {
            const response = await fetch('/stats/conversions');
            if (!response.ok) {
                console.error("Failed to fetch conversion stats data:", response.statusText);
                return;
            }
            const stats = await response.json();

            const options = {
                series: [
                    { name: 'Successful', data: stats.successful, color: '#48c78e' },
                    { name: 'Failed', data: stats.failed, color: '#f14668' }
                ],
                chart: {
                    type: 'bar',
                    height: 350,
                    stacked: true,
                },
                theme: {
                    mode: 'dark',
                    palette: 'palette1'
                },
                plotOptions: {
                    bar: {
                        horizontal: false,
                    },
                },
                stroke: {
                    width: 1,
                    colors: ['#fff']
                },
                xaxis: {
                    categories: stats.labels,
                },
                yaxis: {
                    title: {
                        text: 'Number of Conversions'
                    },
                },
                fill: {
                    opacity: 1
                },
                legend: {
                    position: 'top',
                    horizontalAlign: 'center',
                }
            };

            const chart = new ApexCharts(document.querySelector("#conversion-chart"), options);
            chart.render();

        } catch (error) {
            console.error("Error rendering conversion chart:", error);
        }
    };

    renderConversionChart();
}