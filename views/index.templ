package views

import (
	"encoder/app"
	"encoder/layouts"
	"encoder/t"
	"fmt"
)

script chartData(resources t.Resources, maxResourcesHistory int) {
	const optimizeChartSeries = (data) => {
		if(!data){
			return [0]
		}
		const maxLen = 24;
		const currentLen = data.length;
		if(currentLen <= maxLen) {
			return data;
		}
		const ratio = Math.ceil(currentLen / maxLen)
		let newData = []
		for(let i = 0; i < maxLen; i++){
			let dataSlice = [];
			// console.log("combine " + i)
			for(let x = 0; x < ratio; x++){
				// console.log("data " + ((i * ratio) + x))
				if(data[((i * ratio) + x)]){
					dataSlice.push(data[x * i])
				}
			}
			if(dataSlice.length > 0){
				const sum = dataSlice.reduce((a, b) => a + b, 0);
				const avg = (sum / dataSlice.length) || 0;
				newData.push(avg)	
			}
		}
		return newData;
	}

	var options = {
		chart: {
			type: "line",
			height: "300px",

		},
		series: [
			{
				name: "Cpu Ussage",
				data: optimizeChartSeries(resources.Cpu),
			},
			{
				name: "Memory Ussage",
				data: optimizeChartSeries(resources.Mem),
			}
		],
		xaxis: {
			categories: Array.from(Array(maxResourcesHistory).keys()),
		},
		yaxis: {
            labels: {
                formatter: function (value) {
                    return `${Math.round(value)} %`
                },
            },
            max: 100,
        },
        tooltip: {
            y: {
                formatter: function (value) {
                    return `${Math.round(value)} %`
                },
            },
        }
	}
	var chart = new ApexCharts(document.querySelector("#chart"), options);

	chart.render();

	var options2 = {
		chart: {
			type: "line",
			height: "300px",

		},
		series: [
			{
				name: "NetOut",
				data: optimizeChartSeries(resources.NetOut),
			},
			{
				name: "NetIn",
				data: optimizeChartSeries(resources.NetIn),
			}
		],
		xaxis: {
			categories: Array.from(Array(maxResourcesHistory).keys()),
		},
		yaxis: {
            labels: {
                formatter: function (value) {
                    return `${humanFileSize(value)}/s`
                },
            },
        },
        tooltip: {
            y: {
                formatter: function (value) {
                    return `${humanFileSize(value)}/s`
                },
            },
        }
	}
	var chart2 = new ApexCharts(document.querySelector("#chart2"), options2);

	chart2.render();

	function humanFileSize(bytes, si = false, dp = 1) {
		const thresh = si ? 1000 : 1024;

		if (Math.abs(bytes) < thresh) {
			return bytes + ' B';
		}

		const units = si
			? ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']
			: ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'];
		let u = -1;
		const r = 10 ** dp;

		do {
			bytes /= thresh;
			++u;
		} while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);


		return bytes.toFixed(dp) + ' ' + units[u];
	}
}

templ Index(Ctx t.TemplCtx, Title string, resources t.Resources, savedStorage string, encodedFiles string) {
	@layouts.Default(Ctx, Title) {
		<article class="message">
			<div class="message-header">
				<p>Server Resource Ussage</p>
			</div>
			<div class="message-body">
				<nav class="level">
					<div class="level-item has-text-centered">
						<div>
							<p class="heading">Files in queue</p>
							<p class="title">{ fmt.Sprint(len(app.FilesToEncode)) }</p>
						</div>
					</div>
					<div class="level-item has-text-centered">
						<div>
							<p class="heading">Saved storage</p>
							<p class="title">{ savedStorage }</p>
						</div>
					</div>
					<div class="level-item has-text-centered">
						<div>
							<p class="heading">Encoded Files</p>
							<p class="title">{ encodedFiles }</p>
						</div>
					</div>
				</nav>
				<div id="chart"></div>
				<div id="chart2"></div>
			</div>
		</article>
		@chartData(resources, app.MaxResourcesHistory)
	}
}
