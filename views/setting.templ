package views

import (
	"encoder/layouts"
	"encoder/t"
	"encoder/helper"
	"fmt"
	"time"
	"runtime"
)

templ Setting(Ctx t.TemplCtx, Title string, v t.SettingValidator) {
	@layouts.Default(Ctx, Title) {
		<article class="message">
			<div class="message-header">
				<p>Settings</p>
			</div>
			<div class="message-body">
				<form method="POST" action="/setting">
					<!-- Security Section -->
					<article class="message">
						<div class="message-header">
							<p>Security</p>
						</div>
						<div class="message-body">
							if helper.PStrToStr(v.EnableAuthentication) != "checked" && helper.PStrToStr(v.EnableAuthentication) != "on" {
								<div class="message is-warning">
									<div class="message-header">
										<p>Warning</p>
									</div>
									<div class="message-body">
										Authentication is currently disabled. The application is accessible to anyone on your network. It is highly recommended to enable authentication.
									</div>
								</div>
							}
							<div class="field">
								<label class="checkbox">
									<input
										type="checkbox"
										name="EnableAuthentication"
										checked?={ helper.PStrToStr(v.EnableAuthentication) == "checked" || helper.PStrToStr(v.EnableAuthentication) == "on" }
									/>
									<strong>Enable Authentication</strong>
								</label>
								<p class="help">When enabled, users will be required to log in to access the application. You must create a user before enabling this.</p>
							</div>
							<div class="field">
								<label class="label">Authentication Method</label>
								<div class="control">
									<label class="radio">
										<input
											type="radio"
											name="AuthenticationType"
											value="form"
											checked?={ helper.PStrToStr(v.AuthenticationType) == "form" }
										/>
										Form-Based
									</label>
									<label class="radio">
										<input
											type="radio"
											name="AuthenticationType"
											value="basic"
											checked?={ helper.PStrToStr(v.AuthenticationType) == "basic" }
										/>
										HTTP Basic Auth
									</label>
								</div>
								<p class="help">Choose how users authenticate. Form-based provides a login page, while Basic Auth uses the browser's built-in prompt.</p>
							</div>
							<div class="field">
								<a href="/setting/user" class="button is-info">
									<span>User Settings</span>
								</a>
								<p class="help">Manage users and passwords.</p>
							</div>
						</div>
					</article>

					<!-- Folder Scanning Section -->
					<article class="message">
						<div class="message-header">
							<p>Folder Scanning</p>
						</div>
						<div class="message-body">
							<div class="field">
								<label class="checkbox">
									<input
										type="checkbox"
										name="EnableAutomaticScanns"
										checked?={ helper.PStrToStr(v.EnableAutomaticScanns) == "checked" || helper.PStrToStr(v.EnableAutomaticScanns) == "on" }
									/>
									<strong>Enable Automatic Scanning</strong>
								</label>
								<p class="help">If checked, the application will automatically scan your media folders for new files periodically.</p>
							</div>
							<div class="field">
								<label class="label">Scanning Interval</label>
								<div class="control">
									<div class="select">
										<select name="AutomaticScannsInterval">
											for _, min := range []int{ 2, 5, 15, 30, 60, 120, 720, 1440 } {
												<option value={ templ.EscapeString(fmt.Sprint(min)) } selected?={ v.AutomaticScannsInterval == min }>
													{ templ.EscapeString(fmt.Sprintf("%s", time.Duration(min) * time.Minute )) }
												</option>
											}
										</select>
									</div>
								</div>
								<p class="help">How often the application should scan for new files when automatic scanning is enabled.</p>
							</div>
							<div class="field">
								<label class="checkbox">
									<input
										type="checkbox"
										name="AutomaticScannsAtStartup"
										checked?={ helper.PStrToStr(v.AutomaticScannsAtStartup) == "checked" || helper.PStrToStr(v.AutomaticScannsAtStartup) == "on" }
									/>
									<strong>Scan on Startup</strong>
								</label>
								<p class="help">Performs a full scan of all media folders as soon as the application starts.</p>
							</div>
							<div class="field">
								<a href="/setting/folder" class="button is-info">
									<span>Folder Settings</span>
								</a>
								<p class="help">Add or remove folders to be scanned for media.</p>
							</div>
						</div>
					</article>

					<!-- File Encoding Section -->
					<article class="message">
						<div class="message-header">
							<p>File Encoding</p>
						</div>
						<div class="message-body">
							<div class="field">
								<label class="checkbox">
									<input
										type="checkbox"
										name="EnableEncoding"
										checked?={ helper.PStrToStr(v.EnableEncoding) == "checked" || helper.PStrToStr(v.EnableEncoding) == "on" }
									/>
									<strong>Enable Encoding</strong>
								</label>
								<p class="help">Master switch for the entire encoding engine. If disabled, no files will be processed.</p>
							</div>
							<hr/>
							<h3 class="subtitle is-5">Codec &amp; Quality</h3>
							<div class="field">
								<label class="checkbox">
									<input
										type="checkbox"
										name="EnableHevcEncoding"
										checked?={ helper.PStrToStr(v.EnableHevcEncoding) == "checked" || helper.PStrToStr(v.EnableHevcEncoding) == "on" }
									/>
									<strong>Use HEVC (H.265) Codec</strong>
								</label>
								<p class="help">Encode videos using the HEVC (H.265) codec for better compression. If unchecked, the older H.264 codec will be used.</p>
							</div>
							<div class="field">
								<label class="label">Constant Rate Factor (CRF)</label>
								<div class="control">
									<input
										class="input"
										type="number"
										name="EncodingCrf"
										style="max-width: 400px;"
										value={ templ.EscapeString(fmt.Sprint(v.EncodingCrf)) }
										min="1"
										max="50"
									/>
								</div>
								<p class="help">Controls the output quality. Lower values mean higher quality and larger file sizes. A sane range is 18-28. Default is 25.</p>
							</div>
							<div class="field">
								<label class="label">Output Resolution (Width)</label>
								<div class="control">
									<input
										class="input"
										type="number"
										name="EncodingResolution"
										style="max-width: 400px;"
										value={ templ.EscapeString(fmt.Sprint(v.EncodingResolution)) }
										min="100"
										max="5000"
										step="2"
									/>
								</div>
								<p class="help">The width of the output video in pixels (e.g., 1920 for 1080p). The height will be adjusted automatically to maintain the aspect ratio. Must be an even number.</p>
							</div>
							<hr/>
							<h3 class="subtitle is-5">Hardware &amp; Performance</h3>
							<div class="field">
								<label class="label">Encoding Threads</label>
								<div class="control">
									<input
										class="input"
										type="number"
										name="EncodingThreads"
										style="max-width: 400px;"
										value={ templ.EscapeString(fmt.Sprint(v.EncodingThreads)) }
										min="0"
										max={ fmt.Sprint(runtime.NumCPU()) }
									/>
								</div>
								<p class="help">Number of CPU threads to use for encoding. Set to 0 to use all available threads (Max: { fmt.Sprint(runtime.NumCPU()) }). This setting is ignored when GPU encoding is active.</p>
							</div>
							<div class="field">
								<label class="checkbox">
									<input
										type="checkbox"
										name="EnableNvidiaGpuEncoding"
										checked?={ helper.PStrToStr(v.EnableNvidiaGpuEncoding) == "checked" || helper.PStrToStr(v.EnableNvidiaGpuEncoding) == "on" }
									/>
									<strong>Enable NVIDIA (NVENC) GPU Encoding</strong>
								</label>
								<p class="help">Use an NVIDIA GPU for hardware-accelerated encoding. This is much faster than CPU encoding but requires a compatible NVIDIA graphics card and drivers. GPU encoding is known for having artifacts and might result in lower quality.</p>
							</div>
							<div class="field">
								<label class="checkbox">
									<input
										type="checkbox"
										name="EnableAmdGpuEncoding"
										checked?={ helper.PStrToStr(v.EnableAmdGpuEncoding) == "checked" || helper.PStrToStr(v.EnableAmdGpuEncoding) == "on" }
									/>
									<strong>Enable AMD (VAAPI) GPU Encoding</strong>
								</label>
								<p class="help">Use an AMD GPU for hardware-accelerated encoding. This is much faster than CPU encoding but requires a compatible AMD graphics card and drivers on Linux. GPU encoding is known for having artifacts and might result in lower quality.</p>
							</div>
							<hr/>
							<h3 class="subtitle is-5">Workflow &amp; Debugging</h3>
							<div class="field">
								<label class="label">Maximum Retries</label>
								<div class="control">
									<input
										class="input"
										type="number"
										name="EncodingMaxRetry"
										style="max-width: 400px;"
										value={ templ.EscapeString(fmt.Sprint(v.EncodingMaxRetry)) }
										min="0"
										max="999"
									/>
								</div>
								<p class="help">How many times the application should retry a failed encoding job before marking it as permanently failed.</p>
							</div>
							<div class="field">
								<label class="label">Pre-Copy File Count</label>
								<div class="control">
									<input
										class="input"
										type="number"
										name="PreCopyFileCount"
										style="max-width: 400px;"
										value={ templ.EscapeString(fmt.Sprint(v.PreCopyFileCount)) }
										min="0"
										max="10"
									/>
								</div>
								<p class="help">To speed up processing, the application can copy the next files in the queue to a temporary local directory while the current file is encoding. Set to 0 to disable.</p>
							</div>
							<div class="field">
								<label class="checkbox">
									<input
										type="checkbox"
										name="EnableImageComparison"
										checked?={ helper.PStrToStr(v.EnableImageComparison) == "checked" || helper.PStrToStr(v.EnableImageComparison) == "on" }
									/>
									<strong>Enable Image Comparison</strong>
								</label>
								<p class="help">After each successful encode, generate a side-by-side comparison image showing the original video and the encoded version. Useful for quality checks.</p>
							</div>
						</div>
					</article>

					<!-- Save Button -->
					<div class="field">
						<div class="control">
							<button type="submit" class="button is-primary is-large">
								<span>Save All Settings</span>
							</button>
						</div>
					</div>
				</form>
			</div>
		</article>
	}
}
